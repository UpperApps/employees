## MySQL
spring.datasource.url=jdbc:mysql://localhost:3307/employees
spring.datasource.username=admin
spring.datasource.password=123456

## Hibernate
#'hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false
# drop n create table, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=none
# If it's used @Column(nullable = false) checks nullability before hit the DB.
spring.jpa.properties.hibernate.check_nullability=true

# Logging and debugging (Set to false when finishing debug)
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=false

## Security

# General Security Properties
# Can be set to false to disable security during local development
rest.security.enabled=true

rest.security.api-matcher=/api/**
rest.security.cors.allowed-origins=*
rest.security.cors.allowed-headers=*
rest.security.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
rest.security.cors.max-age=3600
rest.security.issuer-uri=http://localhost:8081/auth/realms/springbootkeycloak

# Properties to secure REST Endpoints using OAuth2 Resource Server
security.oauth2.resource.id=employees-app
security.oauth2.resource.token-info-uri=${rest.security.issuer-uri}/protocol/openid-connect/token/introspect
security.oauth2.resource.user-info-uri=${rest.security.issuer-uri}/protocol/openid-connect/userinfo
security.oauth2.resource.jwt.key-value=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmypPirTugDj5wWJYXAT4trAvydoOWjNkn3dqFTpJBzJaYAyVSyevsIWBzRxm+gw3E+PaJN4lwUJwpnjw9cEmURNrO2Er0y4kf0uz4B/4TPv/9QR2N0QDSRiApJNH3Llv8mEh4KEAdYVTL/KblQ1kJgwyMEPs2XqLF4Bpq5iZaxdPbnQIMSYRlsGbiNVNvI+666wflaeUhkA7o8AhAmJallp91iOB9KqwUfEJn0cJwQZdvCumye3bp0bDbI1yaaE5IRUQB7iJnZPLxA3+W1NzsrYdOrd/EmvAgjkO2Tl7E1NoNkq3kY0MpRWzcSpaPylmIUStqgx6Gdyra0w/m2v5EwIDAQAB

# If this micro-services that needs to call another 
# secured micro-service example:
# security.oauth2.client.client-id=employee-service
# security.oauth2.client.client-secret=68977d81-c59b-49aa-aada-58da9a43a850
# security.oauth2.client.user-authorization-uri=${rest.security.issuer-uri}/protocol/openid-connect/auth
# security.oauth2.client.access-token-uri=${rest.security.issuer-uri}/protocol/openid-connect/token
# security.oauth2.client.scope=openid
# security.oauth2.client.grant-type=client_credentials